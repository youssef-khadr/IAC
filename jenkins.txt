pipeline {
    agent any

 stages {
    stage('TF Plan') {
       steps {
           dir('/mnt/Windows/ykData/Onica/Projects/IFBI/IAC'){
           sh 'terraform plan -out myplan'
           }
         }
     }
     stage('Approval') {
      steps {
        script {
          def userInput = input(id: 'confirm', message: 'Apply Terraform?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
        }
      }
    }
    stage('TF Apply') {
      steps {
        dir('/mnt/Windows/ykData/Onica/Projects/IFBI/IAC'){
          sh 'terraform apply -input=false myplan'
        }
      }
    }
    stage('Push Image To ECR') {
      steps {
        dir('/mnt/Windows/ykData/Onica/Projects/IFBI/IAC'){
          script {
            def repoURL = sh (returnStdout: true, script:'terraform output ecrRepositoryURL')
            def awsRegion = sh (returnStdout: true, script:'terraform output awsRegion')
          
            sh "docker tag my-container:latest ${repoURL}"
            sh "aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${repoURL}"
            sh "docker push ${repoURL}:latest"
          }
        }
      }
    }
    
 }

}
sh 'aws ecr get-login-password --region "${awsRegion}" | docker login --username AWS --password-stdin "${repoURL}"'

def command = $/"echo aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${repoURL}"/$
res = sh(returnStdout: true, script: command).trim()
sh("echo ${res}")